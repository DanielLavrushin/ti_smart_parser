# parse population from Report Constructor (rosstat, adhoc script to run yearly)
# https://showdata.gks.ru/report/278928/?&filter_1_0=2019-01-01+00%3A00%3A00%7C-56%2C2020-01-01+00%3A00%3A00%7C-56%2C2021-01-01+00%3A00%3A00%7C-56&filter_2_0=127937&filter_3_0=13035%2C13441%2C13087%2C13091%2C13096%2C13109%2C13120%2C13148%2C13169%2C13180%2C13193%2C13202%2C13253%2C13281%2C13305%2C13310%2C13142%2C13319%2C13356%2C13200%2C13442%2C13388%2C13392%2C13078%2C13079%2C109349%2C13105%2C13137%2C13185%2C13229%2C13233%2C13268%2C13183%2C13443%2C108674%2C320258%2C13359%2C13384%2C108675%2C13041%2C13085%2C13101%2C13272%2C108676%2C108671%2C13373%2C13133%2C13379%2C13404%2C13402%2C13425%2C13062%2C13444%2C13361%2C13396%2C13399%2C13407%2C13416%2C13428%2C13260%2C109208%2C13166%2C13112%2C13248%2C13256%2C13172%2C13286%2C13338%2C13445%2C13177%2C13297%2C13323%2C13324%2C13329%2C109350%2C13341%2C13446%2C320380%2C13382%2C13413%2C13422%2C13036%2C109269%2C13048%2C109340%2C109342%2C13123%2C320402%2C109118%2C13238%2C13242%2C13313%2C13447%2C320381%2C13368%2C13348%2C13432%2C13153%2C109140%2C13056%2C13069%2C13073%2C13196%2C13292%2C13439%2C13353%2C108677&filterrp_submit=t

from office_db.russian_regions import TRussianRegions
from disclosures_site.declarations.rosstat_data import TRossStatData, TRegionYearInfo


def main():
    regions = TRussianRegions()
    with open("/home/sokirko/pop2021.csv") as inp:
        data = dict()
        name = True
        region_id = None
        for l in inp:
            w = l.strip().split("\t")
            if name:
                r = w[0]
                r = regions.get_region_in_nominative(w[0])
                if r is None:
                    raise Exception("cannot fine {}".format(w[0]))
                region_id = r.id
                name = False
            else:
                assert l.startswith('Раздел')
                data[region_id] = list(map(int, w[-3:]))
                name = True

    for i in regions.iterate_regions_2021():
        if i.id not in  data:
            raise Exception("cannot find data for region_id={}".format(i.id))

    data1 = TRossStatData()
    data1.load_from_disk()
    for region_id, populations  in data.items():
        info2019 = data1.get_data(region_id, 2019)
        if info2019.population != populations[0]:
            raise Exception("region_id={} different data {} != {}".format(region_id, info2019.population, populations[0]))
        s = data1.get_data(region_id, 2021)
        assert  s.median_salary > 0
        s.population = populations[2]
        assert data1.get_data(region_id, 2020) is None
        data1.set_data(region_id, 2020, TRegionYearInfo(population=populations[1]))
    data1.save_to_disk(".new")


if __name__ == '__main__':
    main()