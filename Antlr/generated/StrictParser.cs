//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\StrictParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class StrictParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMICOLON=1, COMMA=2, OPN_BRK=3, CLS_BRK=4, SPC=5, FRACTION_UNICODE=6, 
		HYPHEN=7, OT=8, REALTY_ID=9, FRACTION_ASCII=10, DOLYA_WORD=11, OWN_TYPE=12, 
		COUNTRY=13, REALTY_TYPE=14, SQUARE_METER=15, HECTARE=16, NUMBER=17;
	public const int
		RULE_realty_list = 0, RULE_realty = 1, RULE_own_type = 2, RULE_realty_share = 3, 
		RULE_square = 4, RULE_realty_type = 5, RULE_country = 6;
	public static readonly string[] ruleNames = {
		"realty_list", "realty", "own_type", "realty_share", "square", "realty_type", 
		"country"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", null, null, "'-'", "'\u043E\u0442'", 
		null, null, null, null, null, null, null, "'\u0433\u0430'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "OT", "REALTY_ID", "FRACTION_ASCII", "DOLYA_WORD", "OWN_TYPE", 
		"COUNTRY", "REALTY_TYPE", "SQUARE_METER", "HECTARE", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StrictParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StrictParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StrictParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StrictParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Realty_listContext : ParserRuleContext {
		public RealtyContext[] realty() {
			return GetRuleContexts<RealtyContext>();
		}
		public RealtyContext realty(int i) {
			return GetRuleContext<RealtyContext>(i);
		}
		public ITerminalNode[] HYPHEN() { return GetTokens(StrictParser.HYPHEN); }
		public ITerminalNode HYPHEN(int i) {
			return GetToken(StrictParser.HYPHEN, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(StrictParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(StrictParser.SEMICOLON, i);
		}
		public Realty_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterRealty_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitRealty_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_listContext realty_list() {
		Realty_listContext _localctx = new Realty_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_realty_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HYPHEN) {
					{
					State = 14; Match(HYPHEN);
					}
				}

				State = 17; realty();
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 18; Match(SEMICOLON);
					}
				}

				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HYPHEN || _la==REALTY_TYPE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealtyContext : ParserRuleContext {
		public Realty_typeContext realty_type() {
			return GetRuleContext<Realty_typeContext>(0);
		}
		public Own_typeContext own_type() {
			return GetRuleContext<Own_typeContext>(0);
		}
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(StrictParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(StrictParser.COMMA, i);
		}
		public ITerminalNode OPN_BRK() { return GetToken(StrictParser.OPN_BRK, 0); }
		public ITerminalNode CLS_BRK() { return GetToken(StrictParser.CLS_BRK, 0); }
		public ITerminalNode COUNTRY() { return GetToken(StrictParser.COUNTRY, 0); }
		public ITerminalNode REALTY_ID() { return GetToken(StrictParser.REALTY_ID, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode DOLYA_WORD() { return GetToken(StrictParser.DOLYA_WORD, 0); }
		public RealtyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterRealty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitRealty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealtyContext realty() {
		RealtyContext _localctx = new RealtyContext(Context, State);
		EnterRule(_localctx, 2, RULE_realty);
		int _la;
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 25; realty_type();
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 26; Match(COMMA);
					}
				}

				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 29; Match(OPN_BRK);
					}
				}

				State = 32; own_type();
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 33; Match(CLS_BRK);
					}
				}

				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 36; Match(COMMA);
					}
				}

				State = 39; square();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 40; Match(COMMA);
					}
				}

				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 43; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 46; realty_type();
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 47; Match(COMMA);
					}
				}

				State = 50; square();
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 51; Match(COMMA);
					}
				}

				State = 54; own_type();
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 55; Match(COMMA);
					}
				}

				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 58; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 61; realty_type();
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 62; Match(COMMA);
					}
				}

				State = 65; Match(REALTY_ID);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 66; Match(COMMA);
					}
				}

				State = 69; own_type();
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 70; Match(COMMA);
					}
				}

				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 73; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 76; realty_type();
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 77; Match(OPN_BRK);
					}
				}

				State = 80; realty_share();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 81; Match(DOLYA_WORD);
					}
				}

				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 84; Match(CLS_BRK);
					}
				}

				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 87; Match(COMMA);
					}
				}

				State = 90; square();
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 91; Match(COMMA);
					}
				}

				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 94; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 97; realty_type();
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 98; Match(COMMA);
					}
				}

				State = 101; square();
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 102; Match(COMMA);
					}
				}

				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 105; Match(COUNTRY);
					}
				}

				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 108; Match(OPN_BRK);
					}
				}

				State = 111; own_type();
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 112; Match(CLS_BRK);
					}
				}

				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 115; realty_type();
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 116; Match(COMMA);
					}
				}

				State = 119; square();
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 120; Match(COMMA);
					}
				}

				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 123; Match(COUNTRY);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(StrictParser.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(StrictParser.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(StrictParser.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(StrictParser.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(StrictParser.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 4, RULE_own_type);
		int _la;
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 129; Match(OWN_TYPE);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 130; Match(DOLYA_WORD);
					}
				}

				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 133; Match(COMMA);
					}
				}

				State = 136; realty_share();
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 137; Match(DOLYA_WORD);
					}
				}

				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 140; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(StrictParser.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(StrictParser.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 6, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_UNICODE || _la==FRACTION_ASCII) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(StrictParser.NUMBER, 0); }
		public ITerminalNode SQUARE_METER() { return GetToken(StrictParser.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(StrictParser.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 8, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(NUMBER);
			State = 148;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_typeContext : ParserRuleContext {
		public ITerminalNode REALTY_TYPE() { return GetToken(StrictParser.REALTY_TYPE, 0); }
		public Realty_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterRealty_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitRealty_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_typeContext realty_type() {
		Realty_typeContext _localctx = new Realty_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_realty_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(REALTY_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountryContext : ParserRuleContext {
		public ITerminalNode COUNTRY() { return GetToken(StrictParser.COUNTRY, 0); }
		public CountryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_country; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.EnterCountry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictParserListener typedListener = listener as IStrictParserListener;
			if (typedListener != null) typedListener.ExitCountry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictParserVisitor<TResult> typedVisitor = visitor as IStrictParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountryContext country() {
		CountryContext _localctx = new CountryContext(Context, State);
		EnterRule(_localctx, 12, RULE_country);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(COUNTRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x9D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x5', '\x2', '\x12', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x16', '\n', '\x2', '\x6', '\x2', '\x18', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\x19', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x1E', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '!', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '%', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '(', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', ',', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '/', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x37', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', ';', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'>', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x42', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x46', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'J', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'M', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'Q', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'U', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'X', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '[', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '_', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x62', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x66', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'j', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'm', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'p', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 't', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'x', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'|', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x7F', '\n', '\x3', '\x5', 
		'\x3', '\x81', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x86', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x89', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x8D', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x90', '\n', '\x4', '\x5', '\x4', '\x92', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', 
		'\x4', '\x4', '\x2', '\b', '\b', '\f', '\f', '\x3', '\x2', '\x11', '\x12', 
		'\x2', '\xBE', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x93', '\x3', '\x2', '\x2', '\x2', '\n', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x98', '\x3', '\x2', '\x2', '\x2', '\xE', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\a', '\t', '\x2', '\x2', 
		'\x11', '\x10', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x15', 
		'\x5', '\x4', '\x3', '\x2', '\x14', '\x16', '\a', '\x3', '\x2', '\x2', 
		'\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x18', '\x3', '\x2', '\x2', '\x2', '\x17', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', 
		'\x5', '\f', '\a', '\x2', '\x1C', '\x1E', '\a', '\x4', '\x2', '\x2', '\x1D', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', ' ', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\a', '\x5', 
		'\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', 
		'\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '$', 
		'\x5', '\x6', '\x4', '\x2', '#', '%', '\a', '\x6', '\x2', '\x2', '$', 
		'#', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', 
		'%', '\'', '\x3', '\x2', '\x2', '\x2', '&', '(', '\a', '\x4', '\x2', '\x2', 
		'\'', '&', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x5', '\n', '\x6', 
		'\x2', '*', ',', '\a', '\x4', '\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', 
		'\x2', '-', '/', '\a', '\xF', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x32', '\x5', '\f', '\a', '\x2', '\x31', '\x33', 
		'\a', '\x4', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x36', '\x5', '\n', '\x6', '\x2', '\x35', '\x37', 
		'\a', '\x4', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x5', '\x6', '\x4', '\x2', '\x39', ';', '\a', 
		'\x4', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', '\x2', '\x2', '<', 
		'>', '\a', '\xF', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x41', '\x5', '\f', '\a', '\x2', '@', '\x42', '\a', '\x4', 
		'\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x45', '\a', '\v', '\x2', '\x2', '\x44', '\x46', '\a', '\x4', 
		'\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\x5', '\x6', '\x4', '\x2', 'H', 'J', '\a', '\x4', '\x2', '\x2', 
		'I', 'H', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\a', '\xF', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', '\x81', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '\f', '\a', 
		'\x2', 'O', 'Q', '\a', '\x5', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'T', '\x5', '\b', '\x5', '\x2', 'S', 'U', '\a', '\r', '\x2', 
		'\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\a', '\x6', '\x2', 
		'\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\a', '\x4', '\x2', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', '\n', 
		'\x6', '\x2', ']', '_', '\a', '\x4', '\x2', '\x2', '^', ']', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x62', '\a', '\xF', '\x2', '\x2', '\x61', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x81', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', '\f', 
		'\a', '\x2', '\x64', '\x66', '\a', '\x4', '\x2', '\x2', '\x65', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\x5', '\n', '\x6', 
		'\x2', 'h', 'j', '\a', '\x4', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'm', '\a', '\xF', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'p', '\a', '\x5', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 's', '\x5', '\x6', '\x4', '\x2', 'r', 't', '\a', '\x6', '\x2', 
		'\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', '\x81', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x5', '\f', 
		'\a', '\x2', 'v', 'x', '\a', '\x4', '\x2', '\x2', 'w', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\x5', '\n', '\x6', '\x2', 'z', '|', '\a', '\x4', 
		'\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', 
		'\x2', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\a', 
		'\xF', '\x2', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x80', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '?', '\x3', '\x2', '\x2', '\x2', '\x80', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x63', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x81', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x92', '\a', '\xE', '\x2', '\x2', '\x83', '\x85', '\a', '\xE', 
		'\x2', '\x2', '\x84', '\x86', '\a', '\r', '\x2', '\x2', '\x85', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\a', '\x4', 
		'\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8C', '\x5', '\b', '\x5', '\x2', '\x8B', '\x8D', '\a', '\r', 
		'\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x90', '\a', '\n', '\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x83', '\x3', '\x2', '\x2', '\x2', '\x92', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\t', '\x2', '\x2', '\x2', '\x94', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\x13', '\x2', '\x2', 
		'\x96', '\x97', '\t', '\x3', '\x2', '\x2', '\x97', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\a', '\x10', '\x2', '\x2', '\x99', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\xF', '\x2', '\x2', 
		'\x9B', '\xF', '\x3', '\x2', '\x2', '\x2', '\'', '\x11', '\x15', '\x19', 
		'\x1D', ' ', '$', '\'', '+', '.', '\x32', '\x36', ':', '=', '\x41', '\x45', 
		'I', 'L', 'P', 'T', 'W', 'Z', '^', '\x61', '\x65', 'i', 'l', 'o', 's', 
		'w', '{', '~', '\x80', '\x85', '\x88', '\x8C', '\x8F', '\x91',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
