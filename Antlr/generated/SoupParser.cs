//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\SoupParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SoupParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMICOLON=1, COMMA=2, OPN_BRK=3, CLS_BRK=4, SPC=5, FRACTION_UNICODE=6, 
		HYPHEN=7, FLOATING=8, INT=9, OT=10, SQUARE_METER=11, HECTARE=12, FRACTION_ASCII=13, 
		DOLYA_WORD=14, OWN_TYPE=15, COUNTRY=16, REALTY_TYPE=17, OTHER=18;
	public const int
		RULE_any_realty_item_list = 0, RULE_any_realty_item = 1, RULE_realty_id = 2, 
		RULE_square_value_without_spaces = 3, RULE_square_value_with_spaces = 4, 
		RULE_square_value = 5, RULE_own_type = 6, RULE_realty_share = 7, RULE_square = 8, 
		RULE_realty_type = 9, RULE_country = 10;
	public static readonly string[] ruleNames = {
		"any_realty_item_list", "any_realty_item", "realty_id", "square_value_without_spaces", 
		"square_value_with_spaces", "square_value", "own_type", "realty_share", 
		"square", "realty_type", "country"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", null, null, "'-'", null, null, "'\u043E\u0442'", 
		null, "'\u0433\u0430'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "FLOATING", "INT", "OT", "SQUARE_METER", "HECTARE", "FRACTION_ASCII", 
		"DOLYA_WORD", "OWN_TYPE", "COUNTRY", "REALTY_TYPE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoupParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SoupParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SoupParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SoupParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Any_realty_item_listContext : ParserRuleContext {
		public Any_realty_itemContext[] any_realty_item() {
			return GetRuleContexts<Any_realty_itemContext>();
		}
		public Any_realty_itemContext any_realty_item(int i) {
			return GetRuleContext<Any_realty_itemContext>(i);
		}
		public Any_realty_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_realty_item_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterAny_realty_item_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitAny_realty_item_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_realty_item_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_realty_item_listContext any_realty_item_list() {
		Any_realty_item_listContext _localctx = new Any_realty_item_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_any_realty_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22; any_realty_item();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMA) | (1L << FLOATING) | (1L << INT) | (1L << OWN_TYPE) | (1L << COUNTRY) | (1L << REALTY_TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_realty_itemContext : ParserRuleContext {
		public CountryContext country() {
			return GetRuleContext<CountryContext>(0);
		}
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public Realty_typeContext realty_type() {
			return GetRuleContext<Realty_typeContext>(0);
		}
		public Own_typeContext own_type() {
			return GetRuleContext<Own_typeContext>(0);
		}
		public ITerminalNode INT() { return GetToken(SoupParser.INT, 0); }
		public ITerminalNode FLOATING() { return GetToken(SoupParser.FLOATING, 0); }
		public ITerminalNode COMMA() { return GetToken(SoupParser.COMMA, 0); }
		public Any_realty_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_realty_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterAny_realty_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitAny_realty_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_realty_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_realty_itemContext any_realty_item() {
		Any_realty_itemContext _localctx = new Any_realty_itemContext(Context, State);
		EnterRule(_localctx, 2, RULE_any_realty_item);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; country();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; square();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; realty_type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 30; own_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 31; Match(INT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 32; Match(FLOATING);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 33; Match(COMMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_idContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(SoupParser.INT, 0); }
		public Realty_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterRealty_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitRealty_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_idContext realty_id() {
		Realty_idContext _localctx = new Realty_idContext(Context, State);
		EnterRule(_localctx, 4, RULE_realty_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; _localctx._INT = Match(INT);
			State = 37;
			if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) > 100000)) throw new FailedPredicateException(this, "$INT.int > 100000");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_value_without_spacesContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode FLOATING() { return GetToken(SoupParser.FLOATING, 0); }
		public ITerminalNode INT() { return GetToken(SoupParser.INT, 0); }
		public Square_value_without_spacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value_without_spaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterSquare_value_without_spaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitSquare_value_without_spaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value_without_spaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_value_without_spacesContext square_value_without_spaces() {
		Square_value_without_spacesContext _localctx = new Square_value_without_spacesContext(Context, State);
		EnterRule(_localctx, 6, RULE_square_value_without_spaces);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOATING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; Match(FLOATING);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; _localctx._INT = Match(INT);
				State = 41;
				if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 100000)) throw new FailedPredicateException(this, "$INT.int < 100000");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_value_with_spacesContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode[] INT() { return GetTokens(SoupParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(SoupParser.INT, i);
		}
		public ITerminalNode FLOATING() { return GetToken(SoupParser.FLOATING, 0); }
		public Square_value_with_spacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value_with_spaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterSquare_value_with_spaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitSquare_value_with_spaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value_with_spaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_value_with_spacesContext square_value_with_spaces() {
		Square_value_with_spacesContext _localctx = new Square_value_with_spacesContext(Context, State);
		EnterRule(_localctx, 8, RULE_square_value_with_spaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; _localctx._INT = Match(INT);
			State = 45;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOATING || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 46;
			if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 1000)) throw new FailedPredicateException(this, "$INT.int < 1000");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_valueContext : ParserRuleContext {
		public Square_value_without_spacesContext square_value_without_spaces() {
			return GetRuleContext<Square_value_without_spacesContext>(0);
		}
		public Square_value_with_spacesContext square_value_with_spaces() {
			return GetRuleContext<Square_value_with_spacesContext>(0);
		}
		public Square_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterSquare_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitSquare_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_valueContext square_value() {
		Square_valueContext _localctx = new Square_valueContext(Context, State);
		EnterRule(_localctx, 10, RULE_square_value);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; square_value_without_spaces();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; square_value_with_spaces();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(SoupParser.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(SoupParser.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(SoupParser.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(SoupParser.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(SoupParser.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_own_type);
		int _la;
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 53; Match(OWN_TYPE);
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 54; Match(DOLYA_WORD);
					}
				}

				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 57; Match(COMMA);
					}
				}

				State = 60; realty_share();
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 61; Match(DOLYA_WORD);
					}
				}

				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 64; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(SoupParser.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(SoupParser.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 14, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_UNICODE || _la==FRACTION_ASCII) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public Square_valueContext square_value() {
			return GetRuleContext<Square_valueContext>(0);
		}
		public ITerminalNode SQUARE_METER() { return GetToken(SoupParser.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(SoupParser.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 16, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; square_value();
			State = 72;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_typeContext : ParserRuleContext {
		public ITerminalNode REALTY_TYPE() { return GetToken(SoupParser.REALTY_TYPE, 0); }
		public Realty_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterRealty_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitRealty_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_typeContext realty_type() {
		Realty_typeContext _localctx = new Realty_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_realty_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(REALTY_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountryContext : ParserRuleContext {
		public ITerminalNode COUNTRY() { return GetToken(SoupParser.COUNTRY, 0); }
		public CountryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_country; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterCountry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitCountry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountryContext country() {
		CountryContext _localctx = new CountryContext(Context, State);
		EnterRule(_localctx, 20, RULE_country);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(COUNTRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return realty_id_sempred((Realty_idContext)_localctx, predIndex);
		case 3: return square_value_without_spaces_sempred((Square_value_without_spacesContext)_localctx, predIndex);
		case 4: return square_value_with_spaces_sempred((Square_value_with_spacesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool realty_id_sempred(Realty_idContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) > 100000;
		}
		return true;
	}
	private bool square_value_without_spaces_sempred(Square_value_without_spacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 100000;
		}
		return true;
	}
	private bool square_value_with_spaces_sempred(Square_value_with_spacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 1000;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', 'Q', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x6', '\x2', '\x1A', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x1B', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '%', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '-', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x35', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', ':', '\n', '\b', '\x3', '\b', '\x5', '\b', '=', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x41', '\n', '\b', '\x3', '\b', 
		'\x5', '\b', '\x44', '\n', '\b', '\x5', '\b', '\x46', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x5', '\x3', '\x2', '\n', '\v', '\x4', '\x2', '\b', '\b', 
		'\xF', '\xF', '\x3', '\x2', '\r', '\xE', '\x2', 'S', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', '&', 
		'\x3', '\x2', '\x2', '\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', '\n', 
		'.', '\x3', '\x2', '\x2', '\x2', '\f', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x45', '\x3', '\x2', '\x2', '\x2', '\x10', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'I', '\x3', '\x2', '\x2', '\x2', '\x14', 'L', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'N', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '%', '\x5', '\x16', '\f', '\x2', 
		'\x1E', '%', '\x5', '\x12', '\n', '\x2', '\x1F', '%', '\x5', '\x14', '\v', 
		'\x2', ' ', '%', '\x5', '\xE', '\b', '\x2', '!', '%', '\a', '\v', '\x2', 
		'\x2', '\"', '%', '\a', '\n', '\x2', '\x2', '#', '%', '\a', '\x4', '\x2', 
		'\x2', '$', '\x1D', '\x3', '\x2', '\x2', '\x2', '$', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x1F', '\x3', '\x2', '\x2', '\x2', '$', ' ', '\x3', 
		'\x2', '\x2', '\x2', '$', '!', '\x3', '\x2', '\x2', '\x2', '$', '\"', 
		'\x3', '\x2', '\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', '\v', '\x2', '\x2', 
		'\'', '(', '\x6', '\x4', '\x2', '\x3', '(', '\a', '\x3', '\x2', '\x2', 
		'\x2', ')', '-', '\a', '\n', '\x2', '\x2', '*', '+', '\a', '\v', '\x2', 
		'\x2', '+', '-', '\x6', '\x5', '\x3', '\x3', ',', ')', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '\t', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '\v', '\x2', '\x2', '/', '\x30', '\t', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x6', '\x6', '\x4', '\x3', '\x31', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x5', '\b', '\x5', '\x2', 
		'\x33', '\x35', '\x5', '\n', '\x6', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x46', '\a', '\x11', '\x2', '\x2', 
		'\x37', '\x39', '\a', '\x11', '\x2', '\x2', '\x38', ':', '\a', '\x10', 
		'\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\x3', '\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', '\x2', ';', 
		'=', '\a', '\x4', '\x2', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\x5', '\x10', '\t', '\x2', '?', '\x41', '\a', '\x10', '\x2', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', 
		'\a', '\f', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x36', '\x3', '\x2', '\x2', '\x2', '\x45', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\t', '\x3', '\x2', '\x2', 'H', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x5', '\f', '\a', '\x2', 'J', 'K', '\t', '\x4', '\x2', 
		'\x2', 'K', '\x13', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x13', 
		'\x2', '\x2', 'M', '\x15', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', 
		'\x12', '\x2', '\x2', 'O', '\x17', '\x3', '\x2', '\x2', '\x2', '\v', '\x1B', 
		'$', ',', '\x34', '\x39', '<', '@', '\x43', '\x45',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
