//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\SoupParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SoupParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FILTER=1, SEMICOLON=2, COMMA=3, OPN_BRK=4, CLS_BRK=5, SPC=6, FRACTION_UNICODE=7, 
		HYPHEN=8, OT=9, REALTY_ID=10, FRACTION_ASCII=11, DOLYA_WORD=12, OWN_TYPE=13, 
		COUNTRY=14, REALTY_TYPE=15, SQUARE_METER=16, HECTARE=17, NUMBER=18;
	public const int
		RULE_any_realty_item_list = 0, RULE_any_realty_item = 1, RULE_own_type = 2, 
		RULE_realty_share = 3, RULE_square = 4, RULE_realty_type = 5, RULE_country = 6;
	public static readonly string[] ruleNames = {
		"any_realty_item_list", "any_realty_item", "own_type", "realty_share", 
		"square", "realty_type", "country"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "';'", "','", "'('", "')'", null, null, "'-'", "'\u043E\u0442'", 
		null, null, null, null, null, null, null, "'\u0433\u0430'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FILTER", "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "OT", "REALTY_ID", "FRACTION_ASCII", "DOLYA_WORD", "OWN_TYPE", 
		"COUNTRY", "REALTY_TYPE", "SQUARE_METER", "HECTARE", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoupParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SoupParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SoupParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SoupParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Any_realty_item_listContext : ParserRuleContext {
		public Any_realty_itemContext[] any_realty_item() {
			return GetRuleContexts<Any_realty_itemContext>();
		}
		public Any_realty_itemContext any_realty_item(int i) {
			return GetRuleContext<Any_realty_itemContext>(i);
		}
		public Any_realty_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_realty_item_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterAny_realty_item_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitAny_realty_item_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_realty_item_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_realty_item_listContext any_realty_item_list() {
		Any_realty_item_listContext _localctx = new Any_realty_item_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_any_realty_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14; any_realty_item();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OWN_TYPE) | (1L << COUNTRY) | (1L << REALTY_TYPE) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_realty_itemContext : ParserRuleContext {
		public CountryContext country() {
			return GetRuleContext<CountryContext>(0);
		}
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public Realty_typeContext realty_type() {
			return GetRuleContext<Realty_typeContext>(0);
		}
		public Own_typeContext own_type() {
			return GetRuleContext<Own_typeContext>(0);
		}
		public Any_realty_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_realty_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterAny_realty_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitAny_realty_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_realty_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_realty_itemContext any_realty_item() {
		Any_realty_itemContext _localctx = new Any_realty_itemContext(Context, State);
		EnterRule(_localctx, 2, RULE_any_realty_item);
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUNTRY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19; country();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; square();
				}
				break;
			case REALTY_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 21; realty_type();
				}
				break;
			case OWN_TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 22; own_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(SoupParser.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(SoupParser.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(SoupParser.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(SoupParser.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(SoupParser.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 4, RULE_own_type);
		int _la;
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 26; Match(OWN_TYPE);
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 27; Match(DOLYA_WORD);
					}
				}

				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 30; Match(COMMA);
					}
				}

				State = 33; realty_share();
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 34; Match(DOLYA_WORD);
					}
				}

				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 37; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(SoupParser.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(SoupParser.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 6, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_UNICODE || _la==FRACTION_ASCII) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(SoupParser.NUMBER, 0); }
		public ITerminalNode SQUARE_METER() { return GetToken(SoupParser.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(SoupParser.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 8, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(NUMBER);
			State = 45;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_typeContext : ParserRuleContext {
		public ITerminalNode REALTY_TYPE() { return GetToken(SoupParser.REALTY_TYPE, 0); }
		public Realty_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterRealty_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitRealty_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_typeContext realty_type() {
		Realty_typeContext _localctx = new Realty_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_realty_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(REALTY_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountryContext : ParserRuleContext {
		public ITerminalNode COUNTRY() { return GetToken(SoupParser.COUNTRY, 0); }
		public CountryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_country; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.EnterCountry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISoupParserListener typedListener = listener as ISoupParserListener;
			if (typedListener != null) typedListener.ExitCountry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoupParserVisitor<TResult> typedVisitor = visitor as ISoupParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountryContext country() {
		CountryContext _localctx = new CountryContext(Context, State);
		EnterRule(_localctx, 12, RULE_country);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(COUNTRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '\x36', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x6', '\x2', '\x12', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x13', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1A', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x1F', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '&', '\n', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ')', '\n', '\x4', '\x5', '\x4', '+', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x2', 
		'\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x4', 
		'\x4', '\x2', '\t', '\t', '\r', '\r', '\x3', '\x2', '\x12', '\x13', '\x2', 
		'\x37', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '*', '\x3', '\x2', '\x2', '\x2', '\b', ',', 
		'\x3', '\x2', '\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xE', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x12', '\x5', '\x4', '\x3', '\x2', '\x11', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x3', '\x3', '\x2', '\x2', '\x2', '\x15', '\x1A', '\x5', 
		'\xE', '\b', '\x2', '\x16', '\x1A', '\x5', '\n', '\x6', '\x2', '\x17', 
		'\x1A', '\x5', '\f', '\a', '\x2', '\x18', '\x1A', '\x5', '\x6', '\x4', 
		'\x2', '\x19', '\x15', '\x3', '\x2', '\x2', '\x2', '\x19', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '+', '\a', '\xF', '\x2', '\x2', '\x1C', '\x1E', '\a', '\xF', 
		'\x2', '\x2', '\x1D', '\x1F', '\a', '\xE', '\x2', '\x2', '\x1E', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '!', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\a', '\x5', '\x2', 
		'\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\x5', 
		'\b', '\x5', '\x2', '$', '&', '\a', '\xE', '\x2', '\x2', '%', '$', '\x3', 
		'\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x3', 
		'\x2', '\x2', '\x2', '\'', ')', '\a', '\v', '\x2', '\x2', '(', '\'', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x1B', '\x3', '\x2', '\x2', '\x2', '*', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '+', '\a', '\x3', '\x2', '\x2', '\x2', ',', 
		'-', '\t', '\x2', '\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\a', '\x14', '\x2', '\x2', '/', '\x30', '\t', '\x3', '\x2', 
		'\x2', '\x30', '\v', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x11', '\x2', '\x2', '\x32', '\r', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\x10', '\x2', '\x2', '\x34', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\x13', '\x19', '\x1E', '!', '%', '(', '*',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
