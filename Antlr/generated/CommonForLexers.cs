//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\CommonForLexers.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CommonForLexers : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMICOLON=1, COMMA=2, OPN_BRK=3, CLS_BRK=4, SPC=5, FRACTION_UNICODE=6, 
		HYPHEN=7, OT=8, REALTY_ID=9, FRACTION_ASCII=10, DOLYA_WORD=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "OT", "REALTY_ID", "FRACTION_ASCII", "DOLYA_WORD"
	};


	public CommonForLexers(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CommonForLexers(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", null, null, "'-'", "'\u043E\u0442'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "OT", "REALTY_ID", "FRACTION_ASCII", "DOLYA_WORD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CommonForLexers.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CommonForLexers() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\r', 'S', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x6', '\x6', '#', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'$', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x6', '\n', '\x37', '\n', '\n', '\r', '\n', '\xE', '\n', '\x38', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '=', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'@', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x45', 
		'\n', '\v', '\f', '\v', '\xE', '\v', 'H', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', 'R', '\n', '\f', '\x2', '\x2', '\r', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x3', 
		'\x2', '\x6', '\x4', '\x2', '\xBE', '\xC0', '\x2152', '\x2160', '\x3', 
		'\x2', '\x32', ';', '\x3', '\x2', '\x33', ';', '\x3', '\x2', '\x31', '\x31', 
		'\x2', 'W', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\a', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x1F', '\x3', '\x2', '\x2', '\x2', '\v', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\r', '(', '\x3', '\x2', '\x2', '\x2', '\xF', '*', 
		'\x3', '\x2', '\x2', '\x2', '\x11', ',', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x15', ':', '\x3', '\x2', '\x2', '\x2', 
		'\x17', 'Q', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '=', '\x2', 
		'\x2', '\x1A', '\x4', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', 
		'.', '\x2', '\x2', '\x1C', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '*', '\x2', '\x2', '\x1E', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\a', '+', '\x2', '\x2', ' ', '\n', '\x3', '\x2', '\x2', 
		'\x2', '!', '#', '\a', '\"', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\b', '\x6', '\x2', '\x2', '\'', '\f', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\t', '\x2', '\x2', '\x2', ')', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '/', '\x2', '\x2', '+', '\x10', 
		'\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x440', '\x2', '\x2', '-', 
		'.', '\a', '\x444', '\x2', '\x2', '.', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\t', '\x3', '\x2', '\x2', '\x30', '\x31', '\t', '\x3', '\x2', 
		'\x2', '\x31', '\x32', '\t', '\x3', '\x2', '\x2', '\x32', '\x33', '\t', 
		'\x3', '\x2', '\x2', '\x33', '\x34', '\t', '\x3', '\x2', '\x2', '\x34', 
		'\x36', '\t', '\x3', '\x2', '\x2', '\x35', '\x37', '\t', '\x3', '\x2', 
		'\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x14', '\x3', '\x2', '\x2', 
		'\x2', ':', '>', '\t', '\x4', '\x2', '\x2', ';', '=', '\t', '\x3', '\x2', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\t', '\x5', '\x2', '\x2', '\x42', '\x46', 
		'\t', '\x4', '\x2', '\x2', '\x43', '\x45', '\t', '\x3', '\x2', '\x2', 
		'\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x16', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x436', '\x2', '\x2', 
		'J', 'K', '\a', '\x440', '\x2', '\x2', 'K', 'L', '\a', '\x43D', '\x2', 
		'\x2', 'L', 'R', '\a', '\x43A', '\x2', '\x2', 'M', 'N', '\a', '\x436', 
		'\x2', '\x2', 'N', 'O', '\a', '\x440', '\x2', '\x2', 'O', 'P', '\a', '\x43D', 
		'\x2', '\x2', 'P', 'R', '\a', '\x451', '\x2', '\x2', 'Q', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 'R', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x2', '$', '\x38', '>', '\x46', 'Q', 
		'\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
