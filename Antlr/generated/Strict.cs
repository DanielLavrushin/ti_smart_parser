//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sokirko/smart_parser/Antlr/src/Strict.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Strict : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMICOLON=1, COMMA=2, OPN_BRK=3, CLS_BRK=4, FRACTION_UNICODE=5, HYPHEN=6, 
		FLOATING=7, BULLET=8, INT=9, OT=10, WEB_LINK=11, SQUARE_METER=12, HECTARE=13, 
		FRACTION_ASCII=14, DOLYA_WORD=15, SPC=16, OWN_TYPE=17, COUNTRY=18, REALTY_TYPE=19, 
		OTHER=20;
	public const int
		RULE_realty_list = 0, RULE_realty = 1, RULE_trash = 2, RULE_squareAndCountry = 3, 
		RULE_realty_id = 4, RULE_square_value_without_spaces = 5, RULE_square_value_with_spaces = 6, 
		RULE_square_value = 7, RULE_own_type = 8, RULE_realty_share = 9, RULE_square = 10, 
		RULE_realty_type = 11, RULE_country = 12;
	public static readonly string[] ruleNames = {
		"realty_list", "realty", "trash", "squareAndCountry", "realty_id", "square_value_without_spaces", 
		"square_value_with_spaces", "square_value", "own_type", "realty_share", 
		"square", "realty_type", "country"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "')'", null, "'-'", null, null, null, "'\u043E\u0442'", 
		null, null, "'\u0433\u0430'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "FRACTION_UNICODE", 
		"HYPHEN", "FLOATING", "BULLET", "INT", "OT", "WEB_LINK", "SQUARE_METER", 
		"HECTARE", "FRACTION_ASCII", "DOLYA_WORD", "SPC", "OWN_TYPE", "COUNTRY", 
		"REALTY_TYPE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Strict.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Strict() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Strict(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Strict(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Realty_listContext : ParserRuleContext {
		public RealtyContext[] realty() {
			return GetRuleContexts<RealtyContext>();
		}
		public RealtyContext realty(int i) {
			return GetRuleContext<RealtyContext>(i);
		}
		public ITerminalNode[] HYPHEN() { return GetTokens(Strict.HYPHEN); }
		public ITerminalNode HYPHEN(int i) {
			return GetToken(Strict.HYPHEN, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(Strict.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(Strict.SEMICOLON, i);
		}
		public Realty_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterRealty_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitRealty_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_listContext realty_list() {
		Realty_listContext _localctx = new Realty_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_realty_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HYPHEN) {
					{
					State = 26; Match(HYPHEN);
					}
				}

				State = 29; realty();
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 30; Match(SEMICOLON);
					}
				}

				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HYPHEN || _la==REALTY_TYPE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealtyContext : ParserRuleContext {
		public Realty_typeContext realty_type() {
			return GetRuleContext<Realty_typeContext>(0);
		}
		public Own_typeContext own_type() {
			return GetRuleContext<Own_typeContext>(0);
		}
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(Strict.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(Strict.COMMA, i);
		}
		public ITerminalNode OPN_BRK() { return GetToken(Strict.OPN_BRK, 0); }
		public ITerminalNode CLS_BRK() { return GetToken(Strict.CLS_BRK, 0); }
		public ITerminalNode COUNTRY() { return GetToken(Strict.COUNTRY, 0); }
		public Realty_idContext realty_id() {
			return GetRuleContext<Realty_idContext>(0);
		}
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode DOLYA_WORD() { return GetToken(Strict.DOLYA_WORD, 0); }
		public RealtyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterRealty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitRealty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealtyContext realty() {
		RealtyContext _localctx = new RealtyContext(Context, State);
		EnterRule(_localctx, 2, RULE_realty);
		int _la;
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 37; realty_type();
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 38; Match(COMMA);
					}
				}

				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 41; Match(OPN_BRK);
					}
				}

				State = 44; own_type();
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 45; Match(CLS_BRK);
					}
				}

				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 48; Match(COMMA);
					}
				}

				State = 51; square();
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 52; Match(COMMA);
					}
				}

				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 55; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 58; realty_type();
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 59; Match(COMMA);
					}
				}

				State = 62; square();
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 63; Match(COMMA);
					}
				}

				State = 66; own_type();
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 67; Match(COMMA);
					}
				}

				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 70; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 73; realty_type();
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 74; Match(COMMA);
					}
				}

				State = 77; realty_id();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 78; Match(COMMA);
					}
				}

				State = 81; own_type();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 82; Match(COMMA);
					}
				}

				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 85; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 88; realty_type();
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 89; Match(OPN_BRK);
					}
				}

				State = 92; realty_share();
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 93; Match(DOLYA_WORD);
					}
				}

				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 96; Match(CLS_BRK);
					}
				}

				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 99; Match(COMMA);
					}
				}

				State = 102; square();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 103; Match(COMMA);
					}
				}

				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 106; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 109; realty_type();
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 110; Match(COMMA);
					}
				}

				State = 113; square();
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 114; Match(COMMA);
					}
				}

				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 117; Match(COUNTRY);
					}
				}

				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 120; Match(OPN_BRK);
					}
				}

				State = 123; own_type();
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 124; Match(CLS_BRK);
					}
				}

				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 127; realty_type();
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 128; Match(COMMA);
					}
				}

				State = 131; square();
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 132; Match(COMMA);
					}
				}

				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 135; Match(COUNTRY);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrashContext : ParserRuleContext {
		public ITerminalNode BULLET() { return GetToken(Strict.BULLET, 0); }
		public ITerminalNode OTHER() { return GetToken(Strict.OTHER, 0); }
		public ITerminalNode COMMA() { return GetToken(Strict.COMMA, 0); }
		public TrashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trash; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterTrash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitTrash(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrashContext trash() {
		TrashContext _localctx = new TrashContext(Context, State);
		EnterRule(_localctx, 4, RULE_trash);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMA) | (1L << BULLET) | (1L << OTHER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareAndCountryContext : ParserRuleContext {
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public TrashContext[] trash() {
			return GetRuleContexts<TrashContext>();
		}
		public TrashContext trash(int i) {
			return GetRuleContext<TrashContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(Strict.COMMA, 0); }
		public ITerminalNode COUNTRY() { return GetToken(Strict.COUNTRY, 0); }
		public Square_valueContext square_value() {
			return GetRuleContext<Square_valueContext>(0);
		}
		public SquareAndCountryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareAndCountry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterSquareAndCountry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitSquareAndCountry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareAndCountry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareAndCountryContext squareAndCountry() {
		SquareAndCountryContext _localctx = new SquareAndCountryContext(Context, State);
		EnterRule(_localctx, 6, RULE_squareAndCountry);
		int _la;
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMA) | (1L << BULLET) | (1L << OTHER))) != 0)) {
					{
					{
					State = 142; trash();
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 148; square();
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 149; Match(COMMA);
					}
				}

				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 152; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMA) | (1L << BULLET) | (1L << OTHER))) != 0)) {
					{
					{
					State = 155; trash();
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 161; square_value();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 162; Match(COMMA);
					}
				}

				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 165; Match(COUNTRY);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_idContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(Strict.INT, 0); }
		public Realty_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterRealty_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitRealty_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_idContext realty_id() {
		Realty_idContext _localctx = new Realty_idContext(Context, State);
		EnterRule(_localctx, 8, RULE_realty_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; _localctx._INT = Match(INT);
			State = 171;
			if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) > 6000000)) throw new FailedPredicateException(this, "$INT.int > 6000000");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_value_without_spacesContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode FLOATING() { return GetToken(Strict.FLOATING, 0); }
		public ITerminalNode INT() { return GetToken(Strict.INT, 0); }
		public Square_value_without_spacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value_without_spaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterSquare_value_without_spaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitSquare_value_without_spaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value_without_spaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_value_without_spacesContext square_value_without_spaces() {
		Square_value_without_spacesContext _localctx = new Square_value_without_spacesContext(Context, State);
		EnterRule(_localctx, 10, RULE_square_value_without_spaces);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOATING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; Match(FLOATING);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; _localctx._INT = Match(INT);
				State = 175;
				if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 6000000)) throw new FailedPredicateException(this, "$INT.int < 6000000");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_value_with_spacesContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode[] INT() { return GetTokens(Strict.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(Strict.INT, i);
		}
		public ITerminalNode FLOATING() { return GetToken(Strict.FLOATING, 0); }
		public Square_value_with_spacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value_with_spaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterSquare_value_with_spaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitSquare_value_with_spaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value_with_spaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_value_with_spacesContext square_value_with_spaces() {
		Square_value_with_spacesContext _localctx = new Square_value_with_spacesContext(Context, State);
		EnterRule(_localctx, 12, RULE_square_value_with_spaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; _localctx._INT = Match(INT);
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 179; _localctx._INT = Match(INT);
				}
				break;
			}
			State = 182;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOATING || _la==INT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 183;
			if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 1000)) throw new FailedPredicateException(this, "$INT.int < 1000");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_valueContext : ParserRuleContext {
		public Square_value_without_spacesContext square_value_without_spaces() {
			return GetRuleContext<Square_value_without_spacesContext>(0);
		}
		public Square_value_with_spacesContext square_value_with_spaces() {
			return GetRuleContext<Square_value_with_spacesContext>(0);
		}
		public Square_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterSquare_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitSquare_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_valueContext square_value() {
		Square_valueContext _localctx = new Square_valueContext(Context, State);
		EnterRule(_localctx, 14, RULE_square_value);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; square_value_without_spaces();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; square_value_with_spaces();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(Strict.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(Strict.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(Strict.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(Strict.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(Strict.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_own_type);
		int _la;
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 190; Match(OWN_TYPE);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 191; Match(DOLYA_WORD);
					}
				}

				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 194; Match(COMMA);
					}
				}

				State = 197; realty_share();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 198; Match(DOLYA_WORD);
					}
				}

				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 201; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(Strict.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(Strict.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 18, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_UNICODE || _la==FRACTION_ASCII) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public Square_valueContext square_value() {
			return GetRuleContext<Square_valueContext>(0);
		}
		public ITerminalNode SQUARE_METER() { return GetToken(Strict.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(Strict.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 20, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; square_value();
			State = 209;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_typeContext : ParserRuleContext {
		public ITerminalNode REALTY_TYPE() { return GetToken(Strict.REALTY_TYPE, 0); }
		public Realty_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterRealty_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitRealty_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_typeContext realty_type() {
		Realty_typeContext _localctx = new Realty_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_realty_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(REALTY_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountryContext : ParserRuleContext {
		public ITerminalNode COUNTRY() { return GetToken(Strict.COUNTRY, 0); }
		public CountryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_country; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.EnterCountry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStrictListener typedListener = listener as IStrictListener;
			if (typedListener != null) typedListener.ExitCountry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStrictVisitor<TResult> typedVisitor = visitor as IStrictVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountryContext country() {
		CountryContext _localctx = new CountryContext(Context, State);
		EnterRule(_localctx, 24, RULE_country);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(COUNTRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return realty_id_sempred((Realty_idContext)_localctx, predIndex);
		case 5: return square_value_without_spaces_sempred((Square_value_without_spacesContext)_localctx, predIndex);
		case 6: return square_value_with_spaces_sempred((Square_value_with_spacesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool realty_id_sempred(Realty_idContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) > 6000000;
		}
		return true;
	}
	private bool square_value_without_spaces_sempred(Square_value_without_spacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 6000000;
		}
		return true;
	}
	private bool square_value_with_spaces_sempred(Square_value_with_spacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 1000;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', '\xDA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x5', '\x2', '\x1E', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\"', '\n', '\x2', '\x6', '\x2', '$', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '%', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '*', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x31', '\n', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x34', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x38', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', ';', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '?', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x43', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'G', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'J', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'N', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'R', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'V', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'Y', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ']', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x61', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x64', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'g', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'k', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'n', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'r', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'v', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'y', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '|', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x80', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x84', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x88', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x8B', '\n', 
		'\x3', '\x5', '\x3', '\x8D', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\a', '\x5', '\x92', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x95', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x99', 
		'\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x9C', '\n', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x9F', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xA2', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xA6', '\n', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xA9', '\n', '\x5', '\x5', '\x5', '\xAB', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\xB3', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xB7', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xBE', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC3', '\n', '\n', '\x3', 
		'\n', '\x5', '\n', '\xC6', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xCA', '\n', '\n', '\x3', '\n', '\x5', '\n', '\xCD', '\n', '\n', 
		'\x5', '\n', '\xCF', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x6', 
		'\x5', '\x2', '\x4', '\x4', '\n', '\n', '\x16', '\x16', '\x4', '\x2', 
		'\t', '\t', '\v', '\v', '\x4', '\x2', '\a', '\a', '\x10', '\x10', '\x3', 
		'\x2', '\xE', '\xF', '\x2', '\xFF', '\x2', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x6', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\xAA', '\x3', '\x2', '\x2', '\x2', '\n', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x10', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x14', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1E', '\a', '\b', '\x2', '\x2', '\x1D', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\x5', '\x4', 
		'\x3', '\x2', ' ', '\"', '\a', '\x3', '\x2', '\x2', '!', ' ', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x3', 
		'\x2', '\x2', '\x2', '#', '\x1D', '\x3', '\x2', '\x2', '\x2', '$', '%', 
		'\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\x3', '\x2', '\x2', '\x2', '&', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\'', ')', '\x5', '\x18', '\r', '\x2', '(', '*', '\a', '\x4', '\x2', '\x2', 
		')', '(', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', 
		'*', ',', '\x3', '\x2', '\x2', '\x2', '+', '-', '\a', '\x5', '\x2', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x12', '\n', 
		'\x2', '/', '\x31', '\a', '\x6', '\x2', '\x2', '\x30', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\a', '\x4', '\x2', '\x2', 
		'\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', 
		'\x5', '\x16', '\f', '\x2', '\x36', '\x38', '\a', '\x4', '\x2', '\x2', 
		'\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\a', 
		'\x14', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x8D', '\x3', '\x2', '\x2', '\x2', '<', 
		'>', '\x5', '\x18', '\r', '\x2', '=', '?', '\a', '\x4', '\x2', '\x2', 
		'>', '=', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x5', '\x16', '\f', 
		'\x2', '\x41', '\x43', '\a', '\x4', '\x2', '\x2', '\x42', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x5', '\x12', '\n', 
		'\x2', '\x45', 'G', '\a', '\x4', '\x2', '\x2', '\x46', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', '\x14', '\x2', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x8D', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x5', '\x18', '\r', 
		'\x2', 'L', 'N', '\a', '\x4', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Q', '\x5', '\n', '\x6', '\x2', 'P', 'R', '\a', '\x4', '\x2', 
		'\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x5', '\x12', 
		'\n', '\x2', 'T', 'V', '\a', '\x4', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'Y', '\a', '\x14', '\x2', '\x2', 'X', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\\', '\x5', '\x18', '\r', '\x2', '[', ']', 
		'\a', '\x5', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', 
		']', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', 
		'^', '`', '\x5', '\x14', '\v', '\x2', '_', '\x61', '\a', '\x11', '\x2', 
		'\x2', '`', '_', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', 
		'\a', '\x6', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x65', 'g', '\a', '\x4', '\x2', '\x2', '\x66', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x5', '\x16', '\f', '\x2', 
		'i', 'k', '\a', '\x4', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\a', '\x14', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'q', '\x5', '\x18', '\r', '\x2', 'p', 'r', '\a', '\x4', '\x2', 
		'\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', '\x16', 
		'\f', '\x2', 't', 'v', '\a', '\x4', '\x2', '\x2', 'u', 't', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'y', '\a', '\x14', '\x2', '\x2', 'x', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', 
		'\x2', '\x2', 'z', '|', '\a', '\x5', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', 
		'\x2', '\x2', '}', '\x7F', '\x5', '\x12', '\n', '\x2', '~', '\x80', '\a', 
		'\x6', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x83', '\x5', '\x18', '\r', '\x2', '\x82', '\x84', '\a', 
		'\x4', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x87', '\x5', '\x16', '\f', '\x2', '\x86', '\x88', '\a', 
		'\x4', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8B', '\a', '\x14', '\x2', '\x2', '\x8A', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '<', '\x3', '\x2', '\x2', '\x2', '\x8C', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', 'Z', '\x3', '\x2', '\x2', '\x2', '\x8C', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\t', '\x2', '\x2', 
		'\x2', '\x8F', '\a', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x5', 
		'\x6', '\x4', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x98', '\x5', '\x16', '\f', '\x2', '\x97', '\x99', '\a', '\x4', '\x2', 
		'\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9C', '\a', '\x14', '\x2', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9F', '\x5', '\x6', '\x4', '\x2', '\x9E', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\x10', '\t', 
		'\x2', '\xA4', '\xA6', '\a', '\x4', '\x2', '\x2', '\xA5', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\a', '\x14', '\x2', 
		'\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\t', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'\v', '\x2', '\x2', '\xAD', '\xAE', '\x6', '\x6', '\x2', '\x3', '\xAE', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB3', '\a', '\t', '\x2', '\x2', 
		'\xB0', '\xB1', '\a', '\v', '\x2', '\x2', '\xB1', '\xB3', '\x6', '\a', 
		'\x3', '\x3', '\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB6', '\a', '\v', '\x2', '\x2', '\xB5', '\xB7', '\a', '\v', 
		'\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB9', '\t', '\x3', '\x2', '\x2', '\xB9', '\xBA', '\x6', '\b', 
		'\x4', '\x3', '\xBA', '\xF', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', 
		'\x5', '\f', '\a', '\x2', '\xBC', '\xBE', '\x5', '\xE', '\b', '\x2', '\xBD', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\x11', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xCF', '\a', 
		'\x13', '\x2', '\x2', '\xC0', '\xC2', '\a', '\x13', '\x2', '\x2', '\xC1', 
		'\xC3', '\a', '\x11', '\x2', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC6', '\a', '\x4', '\x2', '\x2', '\xC5', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x5', 
		'\x14', '\v', '\x2', '\xC8', '\xCA', '\a', '\x11', '\x2', '\x2', '\xC9', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\a', 
		'\f', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\x13', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\t', '\x4', '\x2', '\x2', '\xD1', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x5', '\x10', '\t', '\x2', '\xD3', '\xD4', '\t', 
		'\x5', '\x2', '\x2', '\xD4', '\x17', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '\x15', '\x2', '\x2', '\xD6', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\x14', '\x2', '\x2', '\xD8', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x1D', '!', '%', ')', ',', '\x30', '\x33', 
		'\x37', ':', '>', '\x42', '\x46', 'I', 'M', 'Q', 'U', 'X', '\\', '`', 
		'\x63', '\x66', 'j', 'm', 'q', 'u', 'x', '{', '\x7F', '\x83', '\x87', 
		'\x8A', '\x8C', '\x93', '\x98', '\x9B', '\xA0', '\xA5', '\xA8', '\xAA', 
		'\xB2', '\xB6', '\xBD', '\xC2', '\xC5', '\xC9', '\xCC', '\xCE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
