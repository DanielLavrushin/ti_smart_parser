//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\RealtyCommonParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class RealtyCommonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OWN_TYPE=1, DOLYA_WORD=2, COMMA=3, OT=4, FRACTION_UNICODE=5, FRACTION_ASCII=6, 
		NUMBER=7, SQUARE_METER=8, HECTARE=9;
	public const int
		RULE_own_type = 0, RULE_realty_share = 1, RULE_square = 2;
	public static readonly string[] ruleNames = {
		"own_type", "realty_share", "square"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "OWN_TYPE", "DOLYA_WORD", "COMMA", "OT", "FRACTION_UNICODE", "FRACTION_ASCII", 
		"NUMBER", "SQUARE_METER", "HECTARE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RealtyCommonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RealtyCommonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RealtyCommonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RealtyCommonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(RealtyCommonParser.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(RealtyCommonParser.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(RealtyCommonParser.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(RealtyCommonParser.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(RealtyCommonParser.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyCommonParserListener typedListener = listener as IRealtyCommonParserListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyCommonParserListener typedListener = listener as IRealtyCommonParserListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyCommonParserVisitor<TResult> typedVisitor = visitor as IRealtyCommonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 0, RULE_own_type);
		int _la;
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 7; Match(OWN_TYPE);
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 8; Match(DOLYA_WORD);
					}
				}

				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 11; Match(COMMA);
					}
				}

				State = 14; realty_share();
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 15; Match(DOLYA_WORD);
					}
				}

				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 18; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(RealtyCommonParser.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(RealtyCommonParser.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyCommonParserListener typedListener = listener as IRealtyCommonParserListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyCommonParserListener typedListener = listener as IRealtyCommonParserListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyCommonParserVisitor<TResult> typedVisitor = visitor as IRealtyCommonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 2, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_UNICODE || _la==FRACTION_ASCII) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(RealtyCommonParser.NUMBER, 0); }
		public ITerminalNode SQUARE_METER() { return GetToken(RealtyCommonParser.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(RealtyCommonParser.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyCommonParserListener typedListener = listener as IRealtyCommonParserListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyCommonParserListener typedListener = listener as IRealtyCommonParserListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyCommonParserVisitor<TResult> typedVisitor = visitor as IRealtyCommonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 4, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; Match(NUMBER);
			State = 26;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x1F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\f', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\xF', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x16', '\n', '\x2', '\x5', '\x2', '\x18', 
		'\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', 
		'\x4', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\n', '\v', '\x2', ' ', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\b', '\x18', 
		'\a', '\x3', '\x2', '\x2', '\t', '\v', '\a', '\x3', '\x2', '\x2', '\n', 
		'\f', '\a', '\x4', '\x2', '\x2', '\v', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\f', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\xF', '\a', '\x5', '\x2', '\x2', '\xE', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\x5', '\x4', '\x3', '\x2', 
		'\x11', '\x13', '\a', '\x4', '\x2', '\x2', '\x12', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\a', '\x6', '\x2', '\x2', 
		'\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x18', '\x3', '\x2', '\x2', '\x2', '\x17', '\b', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\t', '\x2', 
		'\x2', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', 
		'\a', '\t', '\x2', '\x2', '\x1C', '\x1D', '\t', '\x3', '\x2', '\x2', '\x1D', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\a', '\v', '\xE', '\x12', '\x15', '\x17',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
