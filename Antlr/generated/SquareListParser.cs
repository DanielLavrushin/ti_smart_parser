//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\SquareListParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SquareListParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SQUARE_METER=1, HECTARE=2, OT=3, NUMBER=4, REALTY_ID=5, FRACTION_ASCII=6, 
		DOLYA_WORD=7, SEMICOLON=8, COMMA=9, OPN_BRK=10, CLS_BRK=11, SPC=12, FRACTION_UNICODE=13, 
		HYPHEN=14, OWN_TYPE=15, COUNTRY=16, REALTY_TYPE=17;
	public const int
		RULE_squares = 0, RULE_own_type = 1, RULE_realty_share = 2, RULE_square = 3;
	public static readonly string[] ruleNames = {
		"squares", "own_type", "realty_share", "square"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\u0433\u0430'", "'\u043E\u0442'", null, null, null, null, 
		"';'", "','", "'('", "')'", null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SQUARE_METER", "HECTARE", "OT", "NUMBER", "REALTY_ID", "FRACTION_ASCII", 
		"DOLYA_WORD", "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "OWN_TYPE", "COUNTRY", "REALTY_TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SquareListParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SquareListParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SquareListParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SquareListParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SquaresContext : ParserRuleContext {
		public SquareContext[] square() {
			return GetRuleContexts<SquareContext>();
		}
		public SquareContext square(int i) {
			return GetRuleContext<SquareContext>(i);
		}
		public SquaresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squares; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.EnterSquares(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.ExitSquares(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISquareListParserVisitor<TResult> typedVisitor = visitor as ISquareListParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquares(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquaresContext squares() {
		SquaresContext _localctx = new SquaresContext(Context, State);
		EnterRule(_localctx, 0, RULE_squares);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8; square();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(SquareListParser.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(SquareListParser.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(SquareListParser.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(SquareListParser.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(SquareListParser.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISquareListParserVisitor<TResult> typedVisitor = visitor as ISquareListParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 2, RULE_own_type);
		int _la;
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 14; Match(OWN_TYPE);
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 15; Match(DOLYA_WORD);
					}
				}

				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 18; Match(COMMA);
					}
				}

				State = 21; realty_share();
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 22; Match(DOLYA_WORD);
					}
				}

				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 25; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(SquareListParser.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(SquareListParser.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISquareListParserVisitor<TResult> typedVisitor = visitor as ISquareListParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 4, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_ASCII || _la==FRACTION_UNICODE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(SquareListParser.NUMBER, 0); }
		public ITerminalNode SQUARE_METER() { return GetToken(SquareListParser.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(SquareListParser.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISquareListParserListener typedListener = listener as ISquareListParserListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISquareListParserVisitor<TResult> typedVisitor = visitor as ISquareListParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 6, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(NUMBER);
			State = 33;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '&', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x6', '\x2', '\f', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\r', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x13', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x16', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1A', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1D', '\n', '\x3', '\x5', '\x3', '\x1F', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x2', '\x2', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', '\x4', '\x4', 
		'\x2', '\b', '\b', '\xF', '\xF', '\x3', '\x2', '\x3', '\x4', '\x2', '\'', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\f', '\x5', '\b', '\x5', '\x2', '\v', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x3', '\x3', '\x2', '\x2', '\x2', '\xF', '\x1F', '\a', '\x11', 
		'\x2', '\x2', '\x10', '\x12', '\a', '\x11', '\x2', '\x2', '\x11', '\x13', 
		'\a', '\t', '\x2', '\x2', '\x12', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x16', '\a', '\v', '\x2', '\x2', '\x15', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\x6', 
		'\x4', '\x2', '\x18', '\x1A', '\a', '\t', '\x2', '\x2', '\x19', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\a', '\x5', 
		'\x2', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\t', 
		'\x2', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\a', '\x6', '\x2', '\x2', '#', '$', '\t', '\x3', '\x2', '\x2', '$', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\r', '\x12', '\x15', '\x19', '\x1C', 
		'\x1E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
