//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\SquareLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SquareLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SQUARE_METER=1, HECTARE=2, NUMBER=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"SQUARE_METER", "HECTARE", "NUMBER_WITH_SPACES", "NUMBER_WITHOUT_SPACES", 
		"NUMBER"
	};


	public SquareLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SquareLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'\u0433\u0430'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SQUARE_METER", "HECTARE", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SquareLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SquareLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x5', 'P', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x1C', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '#', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '&', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '/', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', 
		'\x4', '\x5', '\x4', '\x34', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x38', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', ';', '\n', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '>', '\n', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x41', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x46', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', 'I', '\n', 
		'\x5', '\x5', '\x5', 'K', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'O', '\n', '\x6', '\x2', '\x2', '\a', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x2', '\t', '\x2', '\v', '\x5', '\x3', '\x2', '\a', '\x3', '\x2', 
		'\x33', ';', '\x3', '\x2', '\x32', ';', '\x4', '\x2', '\"', '\"', '\xA2', 
		'\xA2', '\x4', '\x2', '-', '-', '\x32', ';', '\x4', '\x2', '.', '.', '\x30', 
		'\x30', '\x2', ']', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\a', ' ', '\x3', '\x2', '\x2', '\x2', '\t', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\v', 'N', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', '\a', 
		'\x43C', '\x2', '\x2', '\xE', '\xF', '\a', '\x434', '\x2', '\x2', '\xF', 
		'\x10', '\a', '\x30', '\x2', '\x2', '\x10', '\x1C', '\a', '\x43E', '\x2', 
		'\x2', '\x11', '\x12', '\a', '\x43C', '\x2', '\x2', '\x12', '\x13', '\a', 
		'\x434', '\x2', '\x2', '\x13', '\x14', '\a', '\x30', '\x2', '\x2', '\x14', 
		'\x15', '\a', '\x43E', '\x2', '\x2', '\x15', '\x1C', '\a', '\x30', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\x43E', '\x2', '\x2', '\x17', '\x18', '\a', 
		'\x34', '\x2', '\x2', '\x18', '\x1C', '\a', '\x30', '\x2', '\x2', '\x19', 
		'\x1A', '\a', '\x43E', '\x2', '\x2', '\x1A', '\x1C', '\a', '\x34', '\x2', 
		'\x2', '\x1B', '\r', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\a', '\x435', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\x432', '\x2', '\x2', '\x1F', '\x6', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\"', '\t', '\x2', '\x2', '\x2', '!', '#', '\t', '\x3', '\x2', '\x2', 
		'\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', 
		'\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', '&', '\t', '\x3', '\x2', 
		'\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\t', '\x4', 
		'\x2', '\x2', '(', ')', '\t', '\x3', '\x2', '\x2', ')', '*', '\t', '\x5', 
		'\x2', '\x2', '*', '\x33', '\t', '\x3', '\x2', '\x2', '+', ',', '\t', 
		'\x6', '\x2', '\x2', ',', '.', '\t', '\x3', '\x2', '\x2', '-', '/', '\t', 
		'\x3', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x32', '\t', '\x3', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '+', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x37', '\t', '\x2', '\x2', '\x2', '\x36', '\x38', '\t', 
		'\x3', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\t', '\x3', '\x2', '\x2', ':', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', 
		'\x2', '\x2', '<', '>', '\t', '\x3', '\x2', '\x2', '=', '<', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x41', '\t', '\x3', '\x2', '\x2', '@', '?', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\t', '\x6', '\x2', '\x2', 
		'\x43', '\x45', '\t', '\x3', '\x2', '\x2', '\x44', '\x46', '\t', '\x3', 
		'\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', 
		'I', '\t', '\x3', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x42', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', '\n', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x5', '\t', '\x5', 
		'\x2', 'M', 'O', '\x5', '\a', '\x4', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x2', '\x1B', '\"', '%', '.', '\x31', '\x33', '\x37', 
		':', '=', '@', '\x45', 'H', 'J', 'N', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
