//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\tmp\smart_parser\smart_parser\Antlr\src\RealtyAllParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class RealtyAllParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SQUARE_METER=1, HECTARE=2, OT=3, NUMBER=4, REALTY_ID=5, FRACTION_ASCII=6, 
		DOLYA_WORD=7, SEMICOLON=8, COMMA=9, OPN_BRK=10, CLS_BRK=11, SPC=12, FRACTION_UNICODE=13, 
		HYPHEN=14, OWN_TYPE=15, COUNTRY=16, REALTY_TYPE=17;
	public const int
		RULE_realty_list = 0, RULE_realty = 1, RULE_realty_type = 2, RULE_own_type = 3, 
		RULE_square = 4, RULE_realty_share = 5;
	public static readonly string[] ruleNames = {
		"realty_list", "realty", "realty_type", "own_type", "square", "realty_share"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\u0433\u0430'", "'\u043E\u0442'", null, null, null, null, 
		"';'", "','", "'('", "')'", null, null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SQUARE_METER", "HECTARE", "OT", "NUMBER", "REALTY_ID", "FRACTION_ASCII", 
		"DOLYA_WORD", "SEMICOLON", "COMMA", "OPN_BRK", "CLS_BRK", "SPC", "FRACTION_UNICODE", 
		"HYPHEN", "OWN_TYPE", "COUNTRY", "REALTY_TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RealtyAllParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RealtyAllParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RealtyAllParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RealtyAllParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Realty_listContext : ParserRuleContext {
		public RealtyContext[] realty() {
			return GetRuleContexts<RealtyContext>();
		}
		public RealtyContext realty(int i) {
			return GetRuleContext<RealtyContext>(i);
		}
		public ITerminalNode[] HYPHEN() { return GetTokens(RealtyAllParser.HYPHEN); }
		public ITerminalNode HYPHEN(int i) {
			return GetToken(RealtyAllParser.HYPHEN, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(RealtyAllParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(RealtyAllParser.SEMICOLON, i);
		}
		public Realty_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.EnterRealty_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.ExitRealty_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyAllParserVisitor<TResult> typedVisitor = visitor as IRealtyAllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_listContext realty_list() {
		Realty_listContext _localctx = new Realty_listContext(Context, State);
		EnterRule(_localctx, 0, RULE_realty_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HYPHEN) {
					{
					State = 12; Match(HYPHEN);
					}
				}

				State = 15; realty();
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 16; Match(SEMICOLON);
					}
				}

				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HYPHEN || _la==REALTY_TYPE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealtyContext : ParserRuleContext {
		public Realty_typeContext realty_type() {
			return GetRuleContext<Realty_typeContext>(0);
		}
		public Own_typeContext own_type() {
			return GetRuleContext<Own_typeContext>(0);
		}
		public SquareContext square() {
			return GetRuleContext<SquareContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RealtyAllParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RealtyAllParser.COMMA, i);
		}
		public ITerminalNode OPN_BRK() { return GetToken(RealtyAllParser.OPN_BRK, 0); }
		public ITerminalNode CLS_BRK() { return GetToken(RealtyAllParser.CLS_BRK, 0); }
		public ITerminalNode COUNTRY() { return GetToken(RealtyAllParser.COUNTRY, 0); }
		public ITerminalNode REALTY_ID() { return GetToken(RealtyAllParser.REALTY_ID, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode DOLYA_WORD() { return GetToken(RealtyAllParser.DOLYA_WORD, 0); }
		public RealtyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.EnterRealty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.ExitRealty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyAllParserVisitor<TResult> typedVisitor = visitor as IRealtyAllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RealtyContext realty() {
		RealtyContext _localctx = new RealtyContext(Context, State);
		EnterRule(_localctx, 2, RULE_realty);
		int _la;
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 23; realty_type();
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 24; Match(COMMA);
					}
				}

				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 27; Match(OPN_BRK);
					}
				}

				State = 30; own_type();
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 31; Match(CLS_BRK);
					}
				}

				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 34; Match(COMMA);
					}
				}

				State = 37; square();
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 38; Match(COMMA);
					}
				}

				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 41; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 44; realty_type();
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 45; Match(COMMA);
					}
				}

				State = 48; square();
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 49; Match(COMMA);
					}
				}

				State = 52; own_type();
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 53; Match(COMMA);
					}
				}

				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 56; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 59; realty_type();
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 60; Match(COMMA);
					}
				}

				State = 63; Match(REALTY_ID);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 64; Match(COMMA);
					}
				}

				State = 67; own_type();
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 68; Match(COMMA);
					}
				}

				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 71; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 74; realty_type();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 75; Match(OPN_BRK);
					}
				}

				State = 78; realty_share();
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 79; Match(DOLYA_WORD);
					}
				}

				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 82; Match(CLS_BRK);
					}
				}

				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 85; Match(COMMA);
					}
				}

				State = 88; square();
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 89; Match(COMMA);
					}
				}

				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 92; Match(COUNTRY);
					}
				}

				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 95; realty_type();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 96; Match(COMMA);
					}
				}

				State = 99; square();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 100; Match(COMMA);
					}
				}

				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 103; Match(COUNTRY);
					}
				}

				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPN_BRK) {
					{
					State = 106; Match(OPN_BRK);
					}
				}

				State = 109; own_type();
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLS_BRK) {
					{
					State = 110; Match(CLS_BRK);
					}
				}

				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 113; realty_type();
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 114; Match(COMMA);
					}
				}

				State = 117; square();
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 118; Match(COMMA);
					}
				}

				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COUNTRY) {
					{
					State = 121; Match(COUNTRY);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_typeContext : ParserRuleContext {
		public ITerminalNode REALTY_TYPE() { return GetToken(RealtyAllParser.REALTY_TYPE, 0); }
		public Realty_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.EnterRealty_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.ExitRealty_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyAllParserVisitor<TResult> typedVisitor = visitor as IRealtyAllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_typeContext realty_type() {
		Realty_typeContext _localctx = new Realty_typeContext(Context, State);
		EnterRule(_localctx, 4, RULE_realty_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(REALTY_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(RealtyAllParser.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(RealtyAllParser.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(RealtyAllParser.DOLYA_WORD, i);
		}
		public ITerminalNode OT() { return GetToken(RealtyAllParser.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyAllParserVisitor<TResult> typedVisitor = visitor as IRealtyAllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_own_type);
		int _la;
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 129; Match(OWN_TYPE);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 130; Match(DOLYA_WORD);
					}
				}

				State = 133; realty_share();
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 134; Match(DOLYA_WORD);
					}
				}

				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 137; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(RealtyAllParser.NUMBER, 0); }
		public ITerminalNode SQUARE_METER() { return GetToken(RealtyAllParser.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(RealtyAllParser.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyAllParserVisitor<TResult> typedVisitor = visitor as IRealtyAllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 8, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(NUMBER);
			State = 143;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(RealtyAllParser.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(RealtyAllParser.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRealtyAllParserListener typedListener = listener as IRealtyAllParserListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRealtyAllParserVisitor<TResult> typedVisitor = visitor as IRealtyAllParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 10, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_ASCII || _la==FRACTION_UNICODE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x96', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x5', '\x2', 
		'\x10', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x14', 
		'\n', '\x2', '\x6', '\x2', '\x16', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x17', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1F', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '#', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '&', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '*', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x31', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x35', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x39', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', '<', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '@', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'H', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'O', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'S', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'V', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'Y', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ']', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '`', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x64', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'h', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'k', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'n', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'r', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'v', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'z', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '}', '\n', '\x3', '\x5', '\x3', '\x7F', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x86', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x8A', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x8D', '\n', '\x5', 
		'\x5', '\x5', '\x8F', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x2', '\x2', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x4', '\x3', '\x2', '\x3', '\x4', 
		'\x4', '\x2', '\b', '\b', '\xF', '\xF', '\x2', '\xB7', '\x2', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '~', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\b', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x90', '\x3', '\x2', '\x2', '\x2', '\f', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x10', '\a', '\x10', '\x2', '\x2', '\xF', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\x13', '\x5', 
		'\x4', '\x3', '\x2', '\x12', '\x14', '\a', '\n', '\x2', '\x2', '\x13', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x16', '\x3', '\x2', '\x2', '\x2', '\x15', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1B', '\x5', 
		'\x6', '\x4', '\x2', '\x1A', '\x1C', '\a', '\v', '\x2', '\x2', '\x1B', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', '\a', 
		'\f', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x5', '\b', '\x5', '\x2', '!', '#', '\a', '\r', '\x2', 
		'\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', '&', '\a', '\v', 
		'\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', ')', '\x5', 
		'\n', '\x6', '\x2', '(', '*', '\a', '\v', '\x2', '\x2', ')', '(', '\x3', 
		'\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x3', 
		'\x2', '\x2', '\x2', '+', '-', '\a', '\x12', '\x2', '\x2', ',', '+', '\x3', 
		'\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\x6', '\x4', '\x2', '/', 
		'\x31', '\a', '\v', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x34', '\x5', '\n', '\x6', '\x2', '\x33', '\x35', 
		'\a', '\v', '\x2', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x38', '\x5', '\b', '\x5', '\x2', '\x37', '\x39', 
		'\a', '\v', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', '\x2', 
		'\x2', '\x2', ':', '<', '\a', '\x12', '\x2', '\x2', ';', ':', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\x5', '\x6', '\x4', '\x2', '>', '@', '\a', 
		'\v', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x43', '\a', '\a', '\x2', '\x2', '\x42', '\x44', '\a', '\v', '\x2', '\x2', 
		'\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', 
		'\x5', '\b', '\x5', '\x2', '\x46', 'H', '\a', '\v', '\x2', '\x2', 'G', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 
		'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\x12', '\x2', '\x2', 
		'J', 'I', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', '\x7F', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x5', '\x6', '\x4', 
		'\x2', 'M', 'O', '\a', '\f', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\x5', '\f', '\a', '\x2', 'Q', 'S', '\a', '\t', '\x2', 
		'\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\a', '\r', '\x2', 
		'\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\a', '\v', '\x2', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x5', '\n', '\x6', 
		'\x2', '[', ']', '\a', '\v', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x3', '\x2', 
		'\x2', '\x2', '^', '`', '\a', '\x12', '\x2', '\x2', '_', '^', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x63', '\x5', '\x6', '\x4', '\x2', '\x62', 
		'\x64', '\a', '\v', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'g', '\x5', '\n', '\x6', '\x2', '\x66', 'h', 
		'\a', '\v', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 
		'i', 'k', '\a', '\x12', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\a', '\f', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\x5', '\b', '\x5', '\x2', 'p', 'r', '\a', '\r', '\x2', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x7F', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', '\x6', '\x4', 
		'\x2', 't', 'v', '\a', '\v', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'y', '\x5', '\n', '\x6', '\x2', 'x', 'z', '\a', '\v', '\x2', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\x3', '\x2', '\x2', '\x2', '{', '}', '\a', '\x12', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '~', '.', '\x3', '\x2', '\x2', '\x2', '~', '=', '\x3', '\x2', 
		'\x2', '\x2', '~', 'L', '\x3', '\x2', '\x2', '\x2', '~', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '~', 's', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\x13', '\x2', '\x2', 
		'\x81', '\a', '\x3', '\x2', '\x2', '\x2', '\x82', '\x8F', '\a', '\x11', 
		'\x2', '\x2', '\x83', '\x85', '\a', '\x11', '\x2', '\x2', '\x84', '\x86', 
		'\a', '\t', '\x2', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x89', '\x5', '\f', '\a', '\x2', '\x88', '\x8A', 
		'\a', '\t', '\x2', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8D', '\a', '\x5', '\x2', '\x2', '\x8C', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8F', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x6', '\x2', '\x2', 
		'\x91', '\x92', '\t', '\x2', '\x2', '\x2', '\x92', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\t', '\x3', '\x2', '\x2', '\x94', '\r', 
		'\x3', '\x2', '\x2', '\x2', '&', '\xF', '\x13', '\x17', '\x1B', '\x1E', 
		'\"', '%', ')', ',', '\x30', '\x34', '\x38', ';', '?', '\x43', 'G', 'J', 
		'N', 'R', 'U', 'X', '\\', '_', '\x63', 'g', 'j', 'm', 'q', 'u', 'y', '|', 
		'~', '\x85', '\x89', '\x8C', '\x8E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
